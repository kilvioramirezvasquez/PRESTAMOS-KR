import React, { useState, useEffect } from 'react'
import { dashboardAPI } from '../services/api'
import { useAuth } from '../contexts/AuthContext'
import { 
  DollarSign, 
  CreditCard, 
  TrendingUp,
  AlertTriangle,
  Calendar,
  Users,
  FileText,
  CheckCircle,
  XCircle,
  Activity,
  Target,
  Briefcase
} from 'lucide-react'

interface Estadisticas {
  cobros: {
    total: number
    cantidad: number
    hoy: number
    semana: number
  }
  prestamos: {
    totalPrestado: number
    totalPendiente: number
    cantidad: number
    activos: number
    pagados: number
    mora: number
    nuevosHoy: number
    vencenHoy: number
  }
  clientes: {
    total: number
    activos: number
    nuevosHoy: number
  }
  usuarios: {
    total: number
    cobradores: number
  }
}

interface PrestamoReciente {
  id: string
  cliente: {
    nombre: string
  }
  monto: number
  fecha: string
  estado: string
}

export default function Dashboard() {
  const { user } = useAuth()
  const [loading, setLoading] = useState(true)
  const [estadisticas, setEstadisticas] = useState<Estadisticas>({
    cobros: { total: 0, cantidad: 0, hoy: 0, semana: 0 },
    prestamos: { totalPrestado: 0, totalPendiente: 0, cantidad: 0, activos: 0, pagados: 0, mora: 0, nuevosHoy: 0, vencenHoy: 0 },
    clientes: { total: 0, activos: 0, nuevosHoy: 0 },
    usuarios: { total: 0, cobradores: 0 }
  });

interface Resumen {
  cobrosHoy: {
    total: number
    cantidad: number
  }
  prestamosVencidos: number
  clientesMora: number
}

const Dashboard: React.FC = () => {
  const { usuario } = useAuth()
  const [estadisticas, setEstadisticas] = useState<Estadisticas | null>(null)
  const [resumen, setResumen] = useState<Resumen | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    cargarDatos()
  }, [])

  const cargarDatos = async () => {
    try {
      setLoading(true)
      setError(null)

      const [estadisticasRes, resumenRes] = await Promise.all([
        dashboardAPI.getEstadisticas(),
        dashboardAPI.getResumen()
      ])

      if (estadisticasRes.success) {
        setEstadisticas(estadisticasRes.data)
      }

      if (resumenRes.success) {
        setResumen(resumenRes.data)
      }
    } catch (error: any) {
      console.error('Error al cargar datos del dashboard:', error)
      setError('Error al cargar los datos del dashboard')
    } finally {
      setLoading(false)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0
    }).format(amount)
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="text-center py-10">
        <div className="text-red-600 mb-4">{error}</div>
        <button 
          onClick={cargarDatos}
          className="btn-primary"
        >
          Reintentar
        </button>
      </div>
    )
  }

  const tarjetasResumen = [
    {
      titulo: 'Cobros Hoy',
      valor: formatCurrency(resumen?.cobrosHoy.total || 0),
      subtitulo: `${resumen?.cobrosHoy.cantidad || 0} cobros`,
      icono: DollarSign,
      color: 'text-green-600',
      bgColor: 'bg-green-50'
    },
    {
      titulo: 'Total Cobrado',
      valor: formatCurrency(estadisticas?.cobros.total || 0),
      subtitulo: `${estadisticas?.cobros.cantidad || 0} cobros`,
      icono: TrendingUp,
      color: 'text-blue-600',
      bgColor: 'bg-blue-50'
    },
    {
      titulo: 'Pendiente de Cobro',
      valor: formatCurrency(estadisticas?.prestamos.totalPendiente || 0),
      subtitulo: `${estadisticas?.prestamos.activos || 0} préstamos activos`,
      icono: CreditCard,
      color: 'text-yellow-600',
      bgColor: 'bg-yellow-50'
    },
    {
      titulo: 'Clientes en Mora',
      valor: resumen?.clientesMora?.toString() || '0',
      subtitulo: `${resumen?.prestamosVencidos || 0} préstamos vencidos`,
      icono: AlertTriangle,
      color: 'text-red-600',
      bgColor: 'bg-red-50'
    }
  ]

  return (
    <div className="space-y-8">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900">
          Dashboard
        </h1>
        <p className="mt-1 text-sm text-gray-500">
          Bienvenido, {usuario?.nombre}. Aquí tienes un resumen de la actividad.
        </p>
      </div>

      {/* Tarjetas de resumen */}
      <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
        {tarjetasResumen.map((tarjeta, index) => {
          const Icono = tarjeta.icono
          return (
            <div key={index} className="card">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className={`p-3 rounded-lg ${tarjeta.bgColor}`}>
                    <Icono className={`h-6 w-6 ${tarjeta.color}`} />
                  </div>
                </div>
                <div className="ml-4 flex-1">
                  <p className="text-sm font-medium text-gray-500">{tarjeta.titulo}</p>
                  <p className="text-2xl font-semibold text-gray-900">{tarjeta.valor}</p>
                  <p className="text-sm text-gray-500">{tarjeta.subtitulo}</p>
                </div>
              </div>
            </div>
          )
        })}
      </div>

      {/* Estadísticas detalladas */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Resumen de préstamos */}
        <div className="card">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Resumen de Préstamos</h3>
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Total prestado:</span>
              <span className="font-semibold">
                {formatCurrency(estadisticas?.prestamos.totalPrestado || 0)}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Pendiente de cobro:</span>
              <span className="font-semibold text-yellow-600">
                {formatCurrency(estadisticas?.prestamos.totalPendiente || 0)}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Préstamos activos:</span>
              <span className="font-semibold text-blue-600">
                {estadisticas?.prestamos.activos || 0}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Préstamos pagados:</span>
              <span className="font-semibold text-green-600">
                {estadisticas?.prestamos.pagados || 0}
              </span>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Préstamos en mora:</span>
              <span className="font-semibold text-red-600">
                {estadisticas?.prestamos.mora || 0}
              </span>
            </div>
          </div>
        </div>

        {/* Cobros recientes por día */}
        <div className="card">
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <Calendar className="h-5 w-5 mr-2" />
            Cobros de los Últimos 7 Días
          </h3>
          <div className="space-y-3">
            {estadisticas?.cobrosPorDia && estadisticas.cobrosPorDia.length > 0 ? (
              estadisticas.cobrosPorDia.map((dia) => (
                <div key={dia._id} className="flex justify-between items-center">
                  <span className="text-sm text-gray-600">
                    {new Date(dia._id).toLocaleDateString('es-ES')}
                  </span>
                  <div className="text-right">
                    <div className="font-semibold">
                      {formatCurrency(dia.total)}
                    </div>
                    <div className="text-xs text-gray-500">
                      {dia.count} cobros
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <p className="text-sm text-gray-500 text-center py-4">
                No hay cobros registrados en los últimos 7 días
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Alertas */}
      {(resumen?.clientesMora || 0) > 0 && (
        <div className="card border-l-4 border-red-400 bg-red-50">
          <div className="flex">
            <div className="flex-shrink-0">
              <AlertTriangle className="h-5 w-5 text-red-400" />
            </div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">
                Atención: Clientes en mora
              </h3>
              <p className="mt-1 text-sm text-red-700">
                Hay {resumen?.clientesMora || 0} clientes con pagos vencidos. 
                Revisa la sección de préstamos para más detalles.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;